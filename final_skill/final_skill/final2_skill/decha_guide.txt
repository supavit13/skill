input เก็บเป็นอาเรย์สองมิติ
int walk[10][3];

10 เพราะมีได้มากสุด 10 การเดินทาง
3 คือ x,y,t

เช่น
5
-7 -3 4
1 6 1
6 4 -4
9 7 2
0 8 5

ก็จะมีอาเรย์เป็น 5 แถว ไล่ไปตั้งแต่ 0,1,2,3,4
เช่น walk[0][0] ก็มีค่า = -7
เช่น walk[3][2] ก็มีค่า = 2

ทีเนี้ยหน้าที่ของเราคือหา "ลำดับ" การเดินทางให้ได้ค่าน้ำมันน้อยที่สุด
สูตร; p = abs(x1-x2) + abs(y1-y2) + abs(t1-t2);
ซึ่งต้องเริ่มที่ x=0,y=0,t=0 และกลับมาที่ x=0,y=0,t=0 เช่นกัน

อย่างเช่นอินพุทด้านบน มี 5 เส้นทาง เพราะฉนั้นลำดับการเดินทางที่เป็นไปได้ก็จะมีทั้งหมด  5! วิธี
ขอกำหนดช่องลำดับอาเรตามนี้

[0] -7 -3 4
[1] 1 6 1
[2] 6 4 -4
[3] 9 7 2
[4] 0 8 5

อย่างเช่นวิธีแรกก็จะเดิน 0,1,2,3,4 วิธีที่สองอาจเดิน 0,1,2,4,3 เป็นต้น สลับกันแบบนี้ไปเรื่อยๆ จะได้ 5! = 120 วิธี
วิธีทำก็คือใช้ฟังก์ชัน permutation
http://www.cplusplus.com/reference/algorithm/next_permutation/

เราก็จะได้ลำดับตามช่องอาเรย์ออกมา 
เช่นอันแรกได้เป็น 1,2,3,4,5 หรือถ้างงก็เขียนโค้ดให้เป็น 0,1,2,3,4

ก็จะได้ลำดับการเดินดังนี้
ครั้งที่ 1
0 0 0 ไป -7 -3 4
ครั้งที่ 2
-7 -3 4 ไป 1 6 1
ครั้งที่ 3
1 6 1 ไป 6 4 -4
ครั้งที่ 4
6 4 -4 ไป 9 7 2
ครั้งที่ 5
9 7 2 ไป 0 8 5
ครั้งที่ 6
0 8 5 ไป 0 0 0

ก็จะได้ค่าน้ำมัน (p) มาสักค่านึง สมมติ ได้ p = 100

ต่อมา permutation ครั้งที่สองทำให้เราได้ลำดับมาเป็น 1,2,3,5,4 หรือ 0,1,2,4,3

ก็จะได้ลำดับการเดินดังนี้
ครั้งที่ 1
0 0 0 ไป -7 -3 4
ครั้งที่ 2
-7 -3 4 ไป 1 6 1
ครั้งที่ 3
1 6 1 ไป 6 4 -4
ครั้งที่ 4
6 4 -4 ไป 0 8 5
ครั้งที่ 5
0 8 5ไป 9 7 2
ครั้งที่ 6
9 7 2 ไป 0 0 0

ก็จะได้ค่าน้ำมัน (p) มาสักค่านึง สมมติ ได้ p = 80 ซึ่งมีค่าน้อยกว่าลำดับการเดินทางครั้งแรก เพราะฉนั้นเราก็จะเปลี่ยน p เป็น p = 80

ก็ทำแบบนี้ไปเรื่อยๆจนกว่าจะหมดทุกวิธี เอาค่า p ที่น้อยที่สุดมาตอบ